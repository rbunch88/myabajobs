# components.json - shadcn/ui

Title: components.json

URL Source: https://ui.shadcn.com/docs/components-json

Markdown Content:
The `components.json` file holds configuration for your project.

We use it to understand how your project is set up and how to generate components customized for your project.

You can create a `components.json` file in your project by running the following command:

```
pnpm dlx shadcn@latest init
```

See the [CLI section](https://ui.shadcn.com/docs/cli) for more information.

[](https://ui.shadcn.com/docs/components-json#schema)$schema
------------------------------------------------------------

You can see the JSON Schema for `components.json` [here](https://ui.shadcn.com/schema.json).

components.json

```
{
  "$schema": "https://ui.shadcn.com/schema.json"
}
```

[](https://ui.shadcn.com/docs/components-json#style)style
---------------------------------------------------------

The style for your components. **This cannot be changed after initialization.**

components.json

```
{
  "style": "default" | "new-york"
}
```

Create project

Deploy your new project in one-click.

[](https://ui.shadcn.com/docs/components-json#tailwind)tailwind
---------------------------------------------------------------

Configuration to help the CLI understand how Tailwind CSS is set up in your project.

See the [installation section](https://ui.shadcn.com/docs/installation) for how to set up Tailwind CSS.

### [](https://ui.shadcn.com/docs/components-json#tailwindconfig)tailwind.config

Path to where your `tailwind.config.js` file is located.

components.json

```
{
  "tailwind": {
    "config": "tailwind.config.js" | "tailwind.config.ts"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#tailwindcss)tailwind.css

Path to the CSS file that imports Tailwind CSS into your project.

components.json

```
{
  "tailwind": {
    "css": "styles/global.css"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#tailwindbasecolor)tailwind.baseColor

This is used to generate the default color palette for your components. **This cannot be changed after initialization.**

components.json

```
{
  "tailwind": {
    "baseColor": "gray" | "neutral" | "slate" | "stone" | "zinc"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#tailwindcssvariables)tailwind.cssVariables

You can choose between using CSS variables or Tailwind CSS utility classes for theming.

To use utility classes for theming set `tailwind.cssVariables` to `false`. For CSS variables, set `tailwind.cssVariables` to `true`.

components.json

```
{
  "tailwind": {
    "cssVariables": `true` | `false`
  }
}
```

For more information, see the [theming docs](https://ui.shadcn.com/docs/theming).

**This cannot be changed after initialization.** To switch between CSS variables and utility classes, you'll have to delete and re-install your components.

### [](https://ui.shadcn.com/docs/components-json#tailwindprefix)tailwind.prefix

The prefix to use for your Tailwind CSS utility classes. Components will be added with this prefix.

components.json

```
{
  "tailwind": {
    "prefix": "tw-"
  }
}
```

[](https://ui.shadcn.com/docs/components-json#rsc)rsc
-----------------------------------------------------

Whether or not to enable support for React Server Components.

The CLI automatically adds a `use client` directive to client components when set to `true`.

components.json

```
{
  "rsc": `true` | `false`
}
```

[](https://ui.shadcn.com/docs/components-json#tsx)tsx
-----------------------------------------------------

Choose between TypeScript or JavaScript components.

Setting this option to `false` allows components to be added as JavaScript with the `.jsx` file extension.

components.json

```
{
  "tsx": `true` | `false`
}
```

[](https://ui.shadcn.com/docs/components-json#aliases)aliases
-------------------------------------------------------------

The CLI uses these values and the `paths` config from your `tsconfig.json` or `jsconfig.json` file to place generated components in the correct location.

Path aliases have to be set up in your `tsconfig.json` or `jsconfig.json` file.

### [](https://ui.shadcn.com/docs/components-json#aliasesutils)aliases.utils

Import alias for your utility functions.

components.json

```
{
  "aliases": {
    "utils": "@/lib/utils"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#aliasescomponents)aliases.components

Import alias for your components.

components.json

```
{
  "aliases": {
    "components": "@/components"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#aliasesui)aliases.ui

Import alias for `ui` components.

The CLI will use the `aliases.ui` value to determine where to place your `ui` components. Use this config if you want to customize the installation directory for your `ui` components.

components.json

```
{
  "aliases": {
    "ui": "@/app/ui"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#aliaseslib)aliases.lib

Import alias for `lib` functions such as `format-date` or `generate-id`.

components.json

```
{
  "aliases": {
    "lib": "@/lib"
  }
}
```

### [](https://ui.shadcn.com/docs/components-json#aliaseshooks)aliases.hooks

Import alias for `hooks` such as `use-media-query` or `use-toast`.

components.json

```
{
  "aliases": {
    "hooks": "@/hooks"
  }
}
```
